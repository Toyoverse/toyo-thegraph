type TokenPausedEntity @entity {
  id: ID!
  typeId: BigInt!
  changer: Bytes! # address
}

type TokenPurchasedEntity @entity {
  id: ID!
  beneficiary: Bytes! # address
  spender: Bytes! # address
  tokenId: BigInt!
  totalSupply: BigInt!
  typeId: BigInt!
  value: BigInt!
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type TokenTypeEntity @entity {
  id: ID!
  changer: Bytes! # address
  newValue: BigInt!
  count: BigInt!
}

type TokenSwappedEntity @entity {
  id: ID!
  sender: Bytes! # address
  fromTypeId: BigInt!
  toTypeId: BigInt!
  fromTokenId: BigInt!
  toTokenId: BigInt!
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type TokenTransferEntity @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt!
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type TokenOwnerEntity @entity {
  id: ID!
  tokenId: BigInt!
  typeId: BigInt!
  currentOwner: Bytes! # address
  currentStaker: Bytes # address
  currentOwnerOrStaker: Bytes! # address
  isStaked: Boolean
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type TokenStakedEntity @entity {
  id: ID!
  tokenId: BigInt!
  currentOwner: Bytes!
}

type TokenClaimedEntity @entity {
  id: ID!
  claimId: String
  tokenId: BigInt!
  owner: Bytes!
  bondAmount: BigInt!
  cardCode: String!
}

type TokenWalletEntity @entity {
  id: ID!
  currentOwner: Bytes! # address
  typeId: BigInt!
  count: BigInt!
}